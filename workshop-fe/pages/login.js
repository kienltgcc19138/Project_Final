import Head from "next/head";

import Link from "next/link";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import "react-toastify/dist/ReactToastify.css";
import { loginService } from "@/services/authService";
import { ToastContainer, toast } from "react-toastify";
import logo from "assets/images/logo.png";
import Cookies from "js-cookie";
const CryptoJS = require("crypto-js");

export default function Login() {
  const router = useRouter();
  // Khai báo key và iv để mã hóa
  const key = CryptoJS.enc.Hex.parse("12345678901234567890123456789012"); // 32 bytes key
  const iv = CryptoJS.enc.Hex.parse("0123456789abcdef0123456789abcdef"); // 16 bytes iv

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [hostname, setHostname] = useState('');

  useEffect(() => {
    setHostname(window.location.origin)
  }, []);
  const handleLogin = async (event) => {
    event.preventDefault();
    setLoading(true);
    const data = {
      email: email,
      password: password,
      urlVerifyEmail: hostname+'/auth/verify-login',
    };
    try {
      const res = await loginService(data);
      switch (res.data.statusCode) {
        case "200":
          if (rememberMe) {
            // Mã hóa email và password bằng AES
            const encryptedEmail = CryptoJS.AES.encrypt(email, key, {
              iv: iv,
            }).toString();
            const encryptedPassword = CryptoJS.AES.encrypt(password, key, {
              iv: iv,
            }).toString();
            // Store the encrypted login information in a cookie
            Cookies.set("loginInfo", `${encryptedEmail}:${encryptedPassword}`);
          }
          //
          setLoading(false);
          toast(res.data.data.message);
          break;
        default:
          break;
      }
    } catch (error) {
      setLoading(false);
      console.log(error)
      console.log(error.response.data.errorCode);
      toast(error.response.data.errorCode);
    }
  };

  const [rememberMe, setRememberMe] = useState(false);

  useEffect(() => {
    // Check for the presence of login information in the cookie
    const cookieValue = Cookies.get("loginInfo");
    if (cookieValue) {
      const [encryptedEmail, encryptedPassword] = cookieValue.split(":");
      // Decrypt the email and password using bcrypt
      // Giải mã email và password bằng AES
      const decryptedEmail = CryptoJS.AES.decrypt(encryptedEmail, key, {
        iv: iv,
      }).toString(CryptoJS.enc.Utf8);
      const decryptedPassword = CryptoJS.AES.decrypt(encryptedPassword, key, {
        iv: iv,
      }).toString(CryptoJS.enc.Utf8);

      if (decryptedEmail && decryptedPassword) {
        setEmail(decryptedEmail);
        setPassword(decryptedPassword);
      }
    }
  }, []);

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer />
      <div
        className={`flex items-center min-h-screen p-4 bgLogin  lg:justify-center`}
      >
        <div className="flex flex-col overflow-hidden bg-white rounded-md shadow-lg max md:flex-row md:flex-1 lg:max-w-screen-md">
          <div className="p-4 py-6 text-white bgPrimary md:w-80 md:flex-shrink-0 md:flex md:flex-col md:items-center md:justify-evenly">
         
            <img src={logo.src} alt="" className="w-[185px] cursor-pointer" />
          </div>
          <div className="p-5 bg-white md:flex-1">
            <h3 className="my-4 text-2xl text-center font-semibold text-gray-700">
              Account Login
            </h3>
            <form onSubmit={handleLogin} className="flex flex-col space-y-5">
              <div className="flex flex-col space-y-1">
                <label
                  htmlFor="email"
                  className="text-sm font-semibold text-gray-500"
                >
                  Email address
                </label>
                <input
                  type="email"
                  id="email"
                  autoFocus
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className="px-4 py-2 transition duration-300 border border-gray-300 rounded focus:border-transparent focus:outline-none focus:ring-4 focus:ring-blue-200"
                />
              </div>
              <div className="flex flex-col space-y-1">
                <div className="flex items-center justify-between">
                  <label
                    htmlFor="password"
                    className="text-sm font-semibold text-gray-500"
                  >
                    Password
                  </label>
                
                </div>
                <input
                  type="password"
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  className="px-4 py-2 transition duration-300 border border-gray-300 rounded focus:border-transparent focus:outline-none focus:ring-4 focus:ring-blue-200"
                />
              </div>
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="remember"
                  onChange={(e) => setRememberMe(e.target.value)}
                  className="w-4 h-4 transition duration-300 rounded focus:ring-2 focus:ring-offset-0 focus:outline-none focus:ring-blue-200"
                />
                <label
                  htmlFor="remember"
                  className="text-sm font-semibold text-gray-500"
                >
                  Remember me
                </label>
              </div>
              <div>
                <button
                  type="submit"
                  className="w-full flex justify-center items-center px-4 py-2 text-lg font-semibold text-white transition-colors duration-300 bgPrimary rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-blue-200 focus:ring-4"
                >
                  {loading ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Processing...
                    </>
                  ) : (
                    "Login"
                  )}
                </button>
              </div>
              <div onClick={() => router.push("/")} className="cursor-pointer text-center textPrimary2   hover:textLink">Back to home</div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}
